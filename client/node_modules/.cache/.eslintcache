[{"/Users/horussinhue/Desktop/PI-Pokemon/client/src/index.js":"1","/Users/horussinhue/Desktop/PI-Pokemon/client/src/App.js":"2","/Users/horussinhue/Desktop/PI-Pokemon/client/src/reportWebVitals.js":"3","/Users/horussinhue/Desktop/PI-Pokemon/client/src/store/index.js":"4","/Users/horussinhue/Desktop/PI-Pokemon/client/src/reducer/index.js":"5","/Users/horussinhue/Desktop/PI-Pokemon/client/src/actions/index.js":"6","/Users/horussinhue/Desktop/PI-Pokemon/client/src/actions/types.js":"7","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Home.jsx":"8","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/LandingPage.jsx":"9","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Paginado.jsx":"10","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Card.jsx":"11","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Home/Type.jsx":"12","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Filtros.jsx":"13","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Types.jsx":"14","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/SearchBar.jsx":"15","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Detail.jsx":"16","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/CreatePokemon.jsx":"17","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/CreatePokemon2.jsx":"18"},{"size":566,"mtime":1658766374986,"results":"19","hashOfConfig":"20"},{"size":856,"mtime":1659359435604,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1653672168000,"results":"22","hashOfConfig":"20"},{"size":281,"mtime":1658766350496,"results":"23","hashOfConfig":"20"},{"size":4396,"mtime":1659691415228,"results":"24","hashOfConfig":"20"},{"size":2663,"mtime":1659393529051,"results":"25","hashOfConfig":"20"},{"size":354,"mtime":1659211862919,"results":"26","hashOfConfig":"20"},{"size":3275,"mtime":1659393269547,"results":"27","hashOfConfig":"20"},{"size":1709,"mtime":1658920159824,"results":"28","hashOfConfig":"20"},{"size":597,"mtime":1658788371728,"results":"29","hashOfConfig":"20"},{"size":1030,"mtime":1659035585467,"results":"30","hashOfConfig":"20"},{"size":333,"mtime":1658779793124,"results":"31","hashOfConfig":"20"},{"size":1115,"mtime":1659568784602,"results":"32","hashOfConfig":"20"},{"size":614,"mtime":1659121500842,"results":"33","hashOfConfig":"20"},{"size":963,"mtime":1659374615451,"results":"34","hashOfConfig":"20"},{"size":3123,"mtime":1659393416543,"results":"35","hashOfConfig":"20"},{"size":10129,"mtime":1659392106327,"results":"36","hashOfConfig":"20"},{"size":10126,"mtime":1659392046395,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"z0z6e",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"/Users/horussinhue/Desktop/PI-Pokemon/client/src/index.js",[],["80","81"],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/App.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/reportWebVitals.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/store/index.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/reducer/index.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/actions/index.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/actions/types.js",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Home.jsx",["82"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from \"react-router-dom\";\nimport { getPokemons, getTypes, getUser, orderByName, filterPokemonsByType, filterCreated } from \"../actions\";\nimport Card from \"./Card\";\nimport Paginado from \"./Paginado\";\nimport '../css/card.css'\nimport '../css/home.css'\nimport '../css/home2.css'\nimport Filtros from \"./Filtros\";\nimport SearchBar from \"./SearchBar\";\nimport imageDef from \"../css/images/quienes.png\"\n\n\n \n\n\nexport default function Home() {\n    const dispatch = useDispatch()\n    const allPokemons = useSelector((state) => state.pokemons)\n    const [orden, setOrden] = useState('')\n    const [currentPage, setCurrentPage] = useState(1)\n    const [pokemonsPerPage,] = useState(12)\n    const indexOfLastPokemon = currentPage * pokemonsPerPage\n    const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage\n    const currentPokemons = allPokemons?.slice(indexOfFirstPokemon, indexOfLastPokemon)\n\n    const paginado = (PageNumber) => {\n        setCurrentPage(PageNumber)\n    }\n\n\n    useEffect(() => {\n        dispatch(getPokemons())\n        dispatch(getTypes())\n        changingBackground(\"general\")\n    }, [dispatch])\n\n   \n   \n\n    function handleSort(e) {\n        console.log(orden)\n        e.preventDefault()\n        dispatch(orderByName(e.target.value))\n        setCurrentPage(1)\n        setOrden(`Ordenado ${e.target.value}`)\n    }\n\n    function changingBackground (nombre) {\n        document.body.className = nombre\n    }\n\n\n    function handleFilteredByType(e) {\n        dispatch(filterPokemonsByType(e.target.value))\n        setCurrentPage(1)\n        console.log(e.target.value)\n        changingBackground(e.target.value)\n    }\n\n\n    function handleFilteredByCreated (e) {\n        dispatch(filterCreated(e.target.value))\n        setCurrentPage(1)\n        \n    }\n\n    \n\n        return (\n            <div className=\"maestroPokemon\">\n                <h2>Bienvenido a la POKEDEX de HENRY </h2>\n                <Paginado pokemonsPerPage={pokemonsPerPage} allPokemons={allPokemons?.length} paginado={paginado} />\n                <div>\n                    <Link to=\"/pokemons\"><button className=\"booton\">Crear un Pokem√≥n</button></Link>\n                </div>\n                <div >\n                    <SearchBar setCurrentPage={setCurrentPage}/>\n                </div>\n                <div >\n                    <button onClick={() => window.location.reload()} className=\"booton\">Reestablecer todos los filtros</button>\n                </div>\n                <Filtros filtros = {{handleSort, handleFilteredByType, handleFilteredByCreated}}/>\n                {\n                    currentPokemons?.map((p) => {\n                        console.log(p.type)\n                        return (\n                            <div key={p.id} className=\"bckgrndImg\">\n                                <Link to={\"/pokemons/\" + p.id}  >\n                                    <Card name={p.name} image={p.image ? p.image : imageDef } type={p.type} key={p.id} createdInDB={p.createdInDB}/>\n                                </Link>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n\n\n\n\n\n\n\n\n","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/LandingPage.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Paginado.jsx",["83"],"import React from 'react'\nimport \"../css/pagination.css\"\n\nconst Paginado = ({ pokemonsPerPage, allPokemons, paginado }) => {\n    const pageNumbers = []\n    for (let i = 1; i <= Math.ceil(allPokemons / pokemonsPerPage); i++) {\n        pageNumbers.push(i)\n    }\n    return (\n        <div className='first'>\n           \n                {pageNumbers &&\n                    pageNumbers.map(number => (  \n                            <a className='aas' onClick={() => paginado(number)} key={number + 100}  >{number} </a>\n                    ))}\n           \n        </div>\n    )\n}\n\nexport default Paginado","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Card.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Home/Type.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Filtros.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Types.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/SearchBar.jsx",[],"/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/Detail.jsx",["84","85","86"],"import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDetail } from \"../actions\";\nimport { useEffect } from \"react\";\nimport '../css/detail.css'\nimport imageDef from \"../css/images/quienes.png\"\n\n\n\nexport default function Detail(props) {\n\n  function changingBackground (nombre) {\n    document.body.className = nombre\n}\n\n  \n  changingBackground(\"detail-page\")\n\n\n\n\n  const dispatch = useDispatch()\n  let id = props.match.params.id\n  useEffect(() => {\n    dispatch(getDetail(id))\n\n    return () => dispatch(getDetail())\n  }, [dispatch])\n  const myPokemon = useSelector((state) => state.detail)\n  const pokemon = myPokemon ? myPokemon[0] : console.log(myPokemon)\n\n\n  return (\n    <>\n       <Link to=\"/home\"><button type='submit'  className=\"booton\">Regresar a p√°gina principal</button></Link>\n      {\n        pokemon && !pokemon.createdInDB ? \n          <div className='body-detail'>\n            <div className='card-detail'>\n              <img className='img-detail' src={pokemon.image }></img>\n              <h5 className='h5-id-detail'>ID: {pokemon.id}</h5>\n              <h4 className='h3-name-detail'>NOMBRE: {pokemon.name}</h4>\n              <h4 className='h3-life-detail'>Vida: {pokemon.life}</h4>\n              <h4 className='h3-attack-detail'>Ataque: {pokemon.attack}</h4>\n              <h4 className='h3-deffense-detail'>Defensa: {pokemon.defense}</h4>\n              <h4 className='h3-velocity-detail'>Velocidad: {pokemon.velocity}</h4>\n              <h4 className='h3-height-detail'>Altura: {pokemon.height}</h4>\n              <h4 className='h3-weight-detail'>Peso: {pokemon.weight}</h4>\n              {\n                pokemon.type.length === 1 ? <h4 className='h3-type-detail'>Tipo: {pokemon.type[0]}</h4> :\n                <h4 className='h3-type-detail'>Tipos: {pokemon.type[0]}, {pokemon.type[1]} </h4>\n              }\n            </div>\n          </div> : pokemon && pokemon.createdInDB ? \n          <div className='body-detail'>\n            <div className='card-detail'>\n              <img className='img-detail' src={pokemon.image ? pokemon.image : imageDef}></img>\n              <h5 className='h5-id-detail'>ID: {pokemon.id}</h5>\n              <h4 className='h3-name-detail'>NOMBRE: {pokemon.name}</h4>\n              <h4 className='h3-life-detail'>Vida: {pokemon.life}</h4>\n              <h4 className='h3-attack-detail'>Ataque: {pokemon.attack}</h4>\n              <h4 className='h3-deffense-detail'>Defensa: {pokemon.defense}</h4>\n              <h4 className='h3-velocity-detail'>Velocidad: {pokemon.velocity}</h4>\n              <h4 className='h3-height-detail'>Altura: {pokemon.height}</h4>\n              <h4 className='h3-weight-detail'>Peso: {pokemon.weight}</h4>\n              <h3>ELIMINAR</h3>\n              {\n                pokemon.type.length === 1 ? <h4 className='h3-type-detail'>Tipo: {pokemon.type[0]}</h4> :\n                <h4 className='h3-type-detail'>Tipos: {pokemon.type[0]}, {pokemon.type[1]} </h4>\n              }\n            </div>\n          </div>\n           :<h2>Cargando...</h2>\n      }\n    </>\n  )\n}\n\n","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/CreatePokemon.jsx",["87","88","89"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { postPokemon, getTypes } from \"../actions\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport '../css/create.css'\n\n\n\n\nfunction validate(input) {\n    let errors = {}\n    if (input.name.length < 4 || input.name.length >10 || !input.name) {\n        errors.name = \"Se requiere un nombre, debe contener entre 4 y 10 caracteres\"\n    } \n    if (!input.type || input.type.length < 1 || input.type.length > 2) {\n        errors.type = \"Solo puedes agregar 1 o 2 tipos de pokem√≥n\"\n    }\n    if(!input.life || input.life < 20 || input.life > 150) {\n        errors.life = \"El m√≠nimo de vida es de 20 y el m√°ximo es de 150\"\n    } \n    if(!input.velocity || input.velocity < 10 || input.velocity > 100){\n        errors.velocity = \"La velocidad m√°xima es de 100 y la m√≠nima de 10\"\n    } \n    if(!input.attack || input.attack < 30 || input.attack > 100){\n        errors.attack = \"El m√°ximo de ataque es 100 y el m√≠nimo de 30\"\n    }\n     if(!input.weight || input.weight < 10 || input.weight > 200){\n        errors.weight = \"El m√≠nimo de peso es 10 y el m√°ximo es de 200\"\n    } \n    if(!input.height || input.height < 60 || input.height > 200){\n        errors.height = \"La altura m√≠nima es de 60 y la m√°xima es de 200\"\n    } \n    if(input.image && input.image.length > 150){\n        errors.image = \"Solo se permiten 150 caracteres como m√°ximo\"\n    }\n    if(!input.defense || input.defense < 60 || input.defense > 200 ){\n        errors.defense = \"El m√≠nimo de defensa es de 60 y el m√°ximo es de 200\"\n    }\n    return errors;\n}\n\nexport default function PokemonsCreate() {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n\n    const types = useSelector((state) => state.types)\n\n    const [errors, setErrors] = useState({})\n\n\n    const [form, setForm] = useState({\n        email: \"\",\n        name: \"\",\n        password: \"\"\n    })\n\n\n    const [input, setInput] = useState({\n        name: \"\",\n        type: [],\n        life: 0,\n        attack: 0,\n        defense: 0,\n        velocity: 0,\n        height: 0,\n        weight: 0,\n        image: \"\"\n    })\n\n    const [count, setCount] = useState(1)\n\n    const updateInput = (e) => {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n        setErrors(validate({\n            ...input,\n            [e.target.name]: e.target.value\n        }))\n    }\n\n\n    function handleSelect(e) {\n        if (input.type.length < 2) {\n            setInput({\n                ...input,\n                type: [...input.type, e.target.value]\n            })\n        } else {\n            alert(\"Solo puedes agregar 2 tipos\")\n        }\n    }\n\n\n    function handleSubmit(e) {\n        if (input.name.length < 4 || input.name > 12 ||\n            input.life < 20 || input.life > 150 ||\n            input.attack < 30 || input.attack > 100 ||\n            input.defense < 60 || input.defense > 200 ||\n            input.velocity < 10 || input.velocity > 100 ||\n            input.height < 60 || input.height > 200 ||\n            input.weight < 10 || input.weight > 200 ||\n            input.type.length < 1) {\n            alert(\"ALguno de los datos ingresados es incorrecto, revisa el formulario e int√©ntalo de nuevo\")\n        } else {\n            e.preventDefault()\n            console.log(input)\n            dispatch(postPokemon(input))\n            alert(\"Pokemon creado\")\n            setInput({\n                name: \"\",\n                type: [],\n                life: \"\",\n                attack: \"\",\n                defense: \"\",\n                velocity: \"\",\n                height: \"\",\n                weight: \"\",\n                image: \"\"\n            })\n            history.push('/home')\n        }\n\n    }\n\n    useEffect(() => {\n        dispatch(getTypes())\n    }, [dispatch])\n\n\n\n    function handleSelect(e) {\n        if (input.type.length < 2) {\n            setInput({\n                ...input,\n                type: [...input.type, e.target.value]\n            })\n        } else {\n            alert(\"Solo puedes agregar 2 tipos\")\n        }\n    }\n\n    function handleDelete(e) {\n        setInput({\n            ...input,\n            type: input.type.filter(type => type !== e)\n        })\n    }\n\n    return (\n        <div className='form-create'>\n            <form  >\n                {count === 1 ? (\n                    <div>\n                        <label>Nombre</label>\n                        <input className='controls-create'\n                            placeholder='Nombre'\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.name}\n                        />\n                        {errors.name && (\n                            <p className='errores'>{errors.name}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 2 ? (\n                    <div>\n                        <label>Vida</label>\n                        <input className='controls-create'\n\n                            type=\"number\"\n                            name=\"life\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.life}\n                        />\n                        {errors.life && (\n                            <p className='errores'>{errors.life}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 3 ? (\n                    <div>\n                        <label>Ataque</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"attack\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.attack}\n                        />\n                        {errors.attack && (\n                            <p className='errores'>{errors.attack}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 4 ? (\n                    <div>\n                        <label>Defensa</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"defense\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.defense}\n                        />\n                        {errors.defense && (\n                            <p className='errores'>{errors.defense}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 5 ? (\n                    <div>\n                        <label>Velocidad</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"velocity\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.velocity}\n                        />\n                        {errors.velocity && (\n                            <p className='errores'>{errors.velocity}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 6 ? (\n                    <div>\n                        <label>Altura</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"height\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.height}\n                        />\n                        {errors.height && (\n                            <p className='errores'>{errors.height}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 7 ? (\n                    <div>\n                        <label>Peso</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"weight\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.weight}\n                        />\n                        {errors.weight && (\n                            <p className='errores'>{errors.weight}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 8 ? (\n                    <div>\n                        <label>Selecciona un tipo de pokem√≥n</label>\n                        <select className='selected' onChange={(e) => handleSelect(e)}>\n                            {types?.map(el => { return (<option value={el.name} key={el.id}>{el.name}</option>) })}\n                        </select>\n                        <div>\n                            {input.type.map(el =>\n                                <div key={el}>\n                                    <p>{el} <button onClick={() => handleDelete(el)}>x</button></p>\n                                </div>)\n                            }\n                            {errors.type && (\n                                <p className='errores'>{errors.type}</p>\n                            )}\n\n                        </div>\n                    </div>\n                ) : null}\n                {count === 9 ? (\n                    <input className=\"controls-create\" placeholder=\"Imagen URL:\" type=\"url\" value={input.image} name=\"image\" />\n                ) : null}\n\n                <div>\n                    <button className='booton' onClick={(e) => handleSubmit(e)} type='submit' >Enviar</button>\n                </div>\n\n            </form>\n\n\n\n\n\n            <div>\n\n                <button className='booton' onClick={() => setCount(count - 1)} disabled={count < 2}>Atr√°s</button>\n                <button className='booton' onClick={() => setCount(count + 1)} disabled={count === 9}>Siguiente</button>\n                <Link to=\"/home\"><button className='booton'>Regresar a inicio</button></Link>\n            </div>\n        </div>\n    )\n}","/Users/horussinhue/Desktop/PI-Pokemon/client/src/components/CreatePokemon2.jsx",["90","91","92"],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link, useHistory } from 'react-router-dom';\nimport { postPokemon, getTypes } from \"../actions\";\n\n\nfunction validate(input) {\n    let errors = {}\n    if (input.name.length < 4 || input.name.length > 10 || !input.name) {\n        errors.name = \"Se requiere un nombre, debe contener entre 4 y 10 caracteres\"\n    }\n    if (!input.type || input.type.length < 1 || input.type.length > 2) {\n        errors.type = \"Solo puedes agregar 1 o 2 tipos de pokem√≥n\"\n    }\n    if (!input.life || input.life < 20 || input.life > 150) {\n        errors.life = \"El m√≠nimo de vida es de 20 y el m√°ximo es de 150\"\n    }\n    if (!input.velocity || input.velocity < 10 || input.velocity > 100) {\n        errors.velocity = \"La velocidad m√°xima es de 100 y la m√≠nima de 10\"\n    }\n    if (!input.attack || input.attack < 30 || input.attack > 100) {\n        errors.attack = \"El m√°ximo de ataque es 100 y el m√≠nimo de 30\"\n    }\n    if (!input.weight || input.weight < 10 || input.weight > 200) {\n        errors.weight = \"El m√≠nimo de peso es 10 y el m√°ximo es de 200\"\n    }\n    if (!input.height || input.height < 60 || input.height > 200) {\n        errors.height = \"La altura m√≠nima es de 60 y la m√°xima es de 200\"\n    }\n    if (input.image && input.image.length > 150) {\n        errors.image = \"Solo se permiten 150 caracteres como m√°ximo\"\n    }\n    if (!input.defense || input.defense < 60 || input.defense > 200) {\n        errors.defense = \"El m√≠nimo de defensa es de 60 y el m√°ximo es de 200\"\n    }\n    return errors;\n}\n\n\nconst CreatePokemon2 = () => {\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n\n    const types = useSelector((state) => state.types)\n\n    const [errors, setErrors] = useState({})\n\n\n    const [form, setForm] = useState({\n        email: \"\",\n        name: \"\",\n        password: \"\"\n    })\n\n\n    const [input, setInput] = useState({\n        name: \"\",\n        type: [],\n        life: 0,\n        attack: 0,\n        defense: 0,\n        velocity: 0,\n        height: 0,\n        weight: 0,\n        image: \"\"\n    })\n\n    const [count, setCount] = useState(1)\n\n    const updateInput = (e) => {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n        setErrors(validate({\n            ...input,\n            [e.target.name]: e.target.value\n        }))\n    }\n\n\n    function handleSelect(e) {\n        if (input.type.length < 2) {\n            setInput({\n                ...input,\n                type: [...input.type, e.target.value]\n            })\n        } else {\n            alert(\"Solo puedes agregar 2 tipos\")\n        }\n    }\n\n\n    function handleSubmit(e) {\n        if (input.name.length < 4 || input.name > 12 ||\n            input.life < 20 || input.life > 150 ||\n            input.attack < 30 || input.attack > 100 ||\n            input.defense < 60 || input.defense > 200 ||\n            input.velocity < 10 || input.velocity > 100 ||\n            input.height < 60 || input.height > 200 ||\n            input.weight < 10 || input.weight > 200 ||\n            input.type.length < 1) {\n            alert(\"ALguno de los datos ingresados es incorrecto, revisa el formulario e int√©ntalo de nuevo\")\n        } else {\n            e.preventDefault()\n            console.log(input)\n            dispatch(postPokemon(input))\n            alert(\"Pokemon creado\")\n            setInput({\n                name: \"\",\n                type: [],\n                life: \"\",\n                attack: \"\",\n                defense: \"\",\n                velocity: \"\",\n                height: \"\",\n                weight: \"\",\n                image: \"\"\n            })\n            history.push('/home')\n        }\n\n    }\n\n    useEffect(() => {\n        dispatch(getTypes())\n    }, [dispatch])\n\n\n\n    function handleSelect(e) {\n        if (input.type.length < 2) {\n            setInput({\n                ...input,\n                type: [...input.type, e.target.value]\n            })\n        } else {\n            alert(\"Solo puedes agregar 2 tipos\")\n        }\n    }\n\n    function handleDelete(e) {\n        setInput({\n            ...input,\n            type: input.type.filter(type => type !== e)\n        })\n    }\n\n    return (\n        <div className='form-create'>\n            <form  >\n                {count === 1 ? (\n                    <div>\n                        <label>Nombre</label>\n                        <input className='controls-create'\n                            placeholder='Nombre'\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.name}\n                        />\n                        {errors.name && (\n                            <p className='errores'>{errors.name}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 2 ? (\n                    <div>\n                        <label>Vida</label>\n                        <input className='controls-create'\n\n                            type=\"number\"\n                            name=\"life\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.life}\n                        />\n                        {errors.life && (\n                            <p className='errores'>{errors.life}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 3 ? (\n                    <div>\n                        <label>Ataque</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"attack\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.attack}\n                        />\n                        {errors.attack && (\n                            <p className='errores'>{errors.attack}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 4 ? (\n                    <div>\n                        <label>Defensa</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"defense\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.defense}\n                        />\n                        {errors.defense && (\n                            <p className='errores'>{errors.defense}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 5 ? (\n                    <div>\n                        <label>Velocidad</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"velocity\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.velocity}\n                        />\n                        {errors.velocity && (\n                            <p className='errores'>{errors.velocity}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 6 ? (\n                    <div>\n                        <label>Altura</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"height\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.height}\n                        />\n                        {errors.height && (\n                            <p className='errores'>{errors.height}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 7 ? (\n                    <div>\n                        <label>Peso</label>\n                        <input className='controls-create'\n                            type=\"number\"\n                            name=\"weight\"\n                            onChange={(e) => updateInput(e)}\n                            value={input.weight}\n                        />\n                        {errors.weight && (\n                            <p className='errores'>{errors.weight}</p>\n                        )}\n                    </div>\n                ) : null}\n                {count === 8 ? (\n                    <div>\n                        <label>Selecciona un tipo de pokem√≥n</label>\n                        <select className='selected' onChange={(e) => handleSelect(e)}>\n                            {types?.map(el => { return (<option value={el.name} key={el.id}>{el.name}</option>) })}\n                        </select>\n                        <div>\n                            {input.type.map(el =>\n                                <div key={el}>\n                                    <p>{el} <button onClick={() => handleDelete(el)}>x</button></p>\n                                </div>)\n                            }\n                            {errors.type && (\n                                <p className='errores'>{errors.type}</p>\n                            )}\n\n                        </div>\n                    </div>\n                ) : null}\n                {count === 9 ? (\n                    <input className=\"controls-create\" placeholder=\"Imagen URL:\" type=\"url\" value={input.image} name=\"image\" />\n                ) : null}\n\n                <div>\n                    <button className='booton' onClick={(e) => handleSubmit(e)} type='submit' >Enviar</button>\n                </div>\n\n            </form>\n\n\n\n\n\n            <div>\n\n                <button className='booton' onClick={() => setCount(count - 1)} disabled={count < 2}>Atr√°s</button>\n                <button className='booton' onClick={() => setCount(count + 1)} disabled={count === 9}>Siguiente</button>\n                <Link to=\"/home\"><button className='booton'>Regresar a inicio</button></Link>\n            </div>\n        </div>\n    )\n}\n\nexport default CreatePokemon2",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":4,"column":33,"nodeType":"99","messageId":"100","endLine":4,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":14,"column":29,"nodeType":"103","endLine":14,"endColumn":102},{"ruleId":"104","severity":1,"message":"105","line":29,"column":6,"nodeType":"106","endLine":29,"endColumn":16,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":41,"column":15,"nodeType":"103","endLine":41,"endColumn":64},{"ruleId":"108","severity":1,"message":"109","line":58,"column":15,"nodeType":"103","endLine":58,"endColumn":90},{"ruleId":"97","severity":1,"message":"110","line":53,"column":12,"nodeType":"99","messageId":"100","endLine":53,"endColumn":16},{"ruleId":"97","severity":1,"message":"111","line":53,"column":18,"nodeType":"99","messageId":"100","endLine":53,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":135,"column":14,"nodeType":"99","messageId":"114","endLine":135,"endColumn":26},{"ruleId":"97","severity":1,"message":"110","line":52,"column":12,"nodeType":"99","messageId":"100","endLine":52,"endColumn":16},{"ruleId":"97","severity":1,"message":"111","line":52,"column":18,"nodeType":"99","messageId":"100","endLine":52,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":134,"column":14,"nodeType":"99","messageId":"114","endLine":134,"endColumn":26},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'getUser' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["117"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'form' is assigned a value but never used.","'setForm' is assigned a value but never used.","no-redeclare","'handleSelect' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [dispatch, id]",{"range":"120","text":"121"},[602,612],"[dispatch, id]"]